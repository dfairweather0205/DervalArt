/* global jQuery, wp */

(function ($) {
    'use strict';

    /**
     * generated by Pikart\WpThemeCore\ThemeOptions\ThemeOptionsFacade php class
     */
    if (!window.hasOwnProperty('pikartCustomizerData')) {
        window.pikartCustomizerData = {
            optionsConfig: {
                style: [],
                text: [],
                htmlAllowedItems: [],
                cssFilters: [],
                fontFamily: [],
                htmlAttributes: []
            },
            itemSlug: '',
            settingIdPrefix: '',
            sectionIdPrefix: '',
            resetOptionsConfig: {
                confirmMessage: '',
                nonce: ''
            },
            copyParentThemeOptionsConfig: {
                confirmMessage: '',
                nonce: ''
            },
            googleFontNonceAction: '',
            optionDelimiter: ''
        };
    }

    var pikartCustomizerData = window.pikartCustomizerData;

    window.pikartCoreCustomizer = {

        getParentDocument: function () {
            return parent === null ? null : parent.document;
        },

        buildSectionId: function (id) {
            return pikartCustomizerData.sectionIdPrefix + id;
        },

        buildFrontSectionId: function (id) {
            return 'accordion-section-' + window.pikartCoreCustomizer.buildSectionId(id);
        },

        getSectionItem: function (id) {
            return $('#' + window.pikartCoreCustomizer.buildFrontSectionId(id),
                window.pikartCoreCustomizer.getParentDocument());
        },

        buildSettingId: function (id) {
            return pikartCustomizerData.settingIdPrefix + id;
        },

        buildCustomizeControlId: function (id) {
            return 'customize-control-' + window.pikartCoreCustomizer.buildSettingId(id);
        },

        getControlElement: function (controlId, element) {
            return $('#' + window.pikartCoreCustomizer.buildCustomizeControlId(controlId) + ' ' + element,
                window.pikartCoreCustomizer.getParentDocument());
        },

        getControlItem: function (controlId) {
            return $('#' + window.pikartCoreCustomizer.buildCustomizeControlId(controlId),
                window.pikartCoreCustomizer.getParentDocument());
        },

        changeOptionElementText: function (optionId, element) {
            window.pikartCoreCustomizer.changeOptionElementsText(optionId, [element]);
        },

        changeOptionElementsText: function (optionId, elements) {
            var joinedElements = $(elements.join(', ')),
                htmlAllowed = pikartCustomizerData.optionsConfig.htmlAllowedItems.indexOf(optionId) !== -1;

            wp.customize(optionId, function (value) {
                value.bind(function (to) {
                    if (htmlAllowed) {
                        joinedElements.html(to);
                    } else {
                        joinedElements.text(to);
                    }
                });
            });
        },

        customizeWhenOptionUpdated: function (optionId, callback) {
            wp.customize(window.pikartCoreCustomizer.buildSettingId(optionId), function (value) {
                value.bind(function (to) {
                    callback(to);
                });
            });
        },

        customizeWhenOptionsUpdated: function (optionIds, callback) {
            optionIds.forEach(function (optionId) {
                window.pikartCoreCustomizer.customizeWhenOptionUpdated(optionId, callback);
            });
        },

        getOptionValue: function (optionId) {
            return wp.customize.value(window.pikartCoreCustomizer.buildSettingId(optionId))();
        },

        transparencyToOpacity: function (transparency) {
            return 1 - Math.min(Math.abs(transparency), 100) / 100;
        },

        hexToRgbaColor: function (hexColor, opacity) {
            var r, g, b, rgbaColor;

            hexColor = hexColor.replace('#', '');

            r = parseInt(hexColor.substring(0, 2), 16);
            g = parseInt(hexColor.substring(2, 4), 16);
            b = parseInt(hexColor.substring(4, 6), 16);

            rgbaColor = 'rgba(' + r + ',' + g + ',' + b + ',' + opacity + ')';

            return rgbaColor;
        },

        hexWithTransparencyToRgbaString: function (hexColor, transparency) {
            return window.pikartCoreCustomizer.hexToRgbaColor(
                hexColor, window.pikartCoreCustomizer.transparencyToOpacity(transparency));
        },

        setCssClass: function (item, to, values, cssClassPrefix) {
            var cssClasses = [];

            values.forEach(function (value) {
                cssClasses.push(cssClassPrefix + value);
            });

            $(item).removeClass(cssClasses.join(' ')).addClass(cssClassPrefix + to);
        }
    };

    var getControlElement = window.pikartCoreCustomizer.getControlElement;

    var optionCssFilter = {
        sizeUnitEm: function (value) {
            return value + 'em';
        },
        sizeUnitPx: function (value) {
            return value + 'px';
        },
        reversePercentage: function (value) {
            return (100 / parseInt(value, 10)).toString() + '%';
        },
        fontFamily: function (value) {
            return '\'' + value.split(':')[0].replace(/\+/g, ' ') + '\'';
        }
    };

    var filterCssOption = function (optionId, value) {
        var cssFilters = pikartCustomizerData.optionsConfig.cssFilters;

        if (cssFilters.hasOwnProperty(optionId)) {
            var filterName = cssFilters[optionId];

            if (optionCssFilter.hasOwnProperty(filterName)) {
                return optionCssFilter[filterName](value);
            }
        }

        return value;
    };


    var optionsStyleConfig = pikartCustomizerData.optionsConfig.style;

    Object.keys(optionsStyleConfig).forEach(function (optionId) {
        var optionConfig = optionsStyleConfig[optionId];

        wp.customize(optionId, function (value) {
            value.bind(function (to) {
                to = filterCssOption(optionId, to);
                var optionDelimiter = pikartCustomizerData.optionDelimiter;

                Object.keys(optionConfig).forEach(function (elementProperty) {
                    var elements = optionConfig[elementProperty].join(', ');


                    if (elementProperty.indexOf(optionDelimiter) !== -1) {
                        elementProperty = elementProperty.split(optionDelimiter).join(to);

                        var properties = elementProperty.split(';');

                        properties.forEach(function (property) {
                            var pair = property.split(':');

                            $(elements).css(pair[0], pair[1]);
                        });
                    } else {
                        $(elements).css(elementProperty, to);
                    }
                });
            });
        });
    });

    var optionsTextConfig = pikartCustomizerData.optionsConfig.text;

    Object.keys(optionsTextConfig).forEach(function (optionId) {
        var elements = optionsTextConfig[optionId];
        window.pikartCoreCustomizer.changeOptionElementsText(optionId, elements);
    });

    var htmlAttributesConfig = pikartCustomizerData.optionsConfig.htmlAttributes;

    Object.keys(htmlAttributesConfig).forEach(function (optionId) {
        var items = htmlAttributesConfig[optionId];

        wp.customize(optionId, function (value) {
            value.bind(function (to) {
                Object.keys(items).forEach(function (attribute) {
                    var joinedElements = items[attribute].join(', ');
                    $(joinedElements).attr(attribute, to);
                });
            });
        });
    });

    var sortSelectOptions = function (selectElement) {
        var selectList = selectElement.find('option');

        selectList.sort(function (option1, option2) {
            if (option1.value === option2.value) {
                return 0;
            }

            return option1.value < option2.value ? -1 : 1;
        });

        selectElement.html(selectList);
    };

    getControlElement('add_google_font', 'input').after('<span id="google-font-message"></span>');
    var addGoogleFontButton = getControlElement('add_google_font', 'input');

    addGoogleFontButton.on('click', function () {
        var googleFontEl = getControlElement('google_font', ' input'),
            googleFont = googleFontEl.val().trim(),
            urlEncodedGoogleFont = encodeURIComponent(googleFont),
            googleFontMessage = $('#google-font-message', window.pikartCoreCustomizer.getParentDocument());

        googleFontMessage.text('...');
        addGoogleFontButton.prop('disabled', true);

        $.ajax({
            method: 'POST',
            url: wp.ajax.settings.url,
            data: {
                action: 'pikart_add_google_font',
                googleFont: urlEncodedGoogleFont,
                nonce: pikartCustomizerData.googleFontNonceAction
            },
            success: function (response) {
                addGoogleFontButton.prop('disabled', false);

                if (response.success) {
                    googleFontMessage.text(response.data.message);
                    $('head style').last().append(response.data.fontContent);

                    var font = response.data.font,
                        fontOption = $('<option></option>').attr('value', font).text(font);

                    pikartCustomizerData.optionsConfig.fontFamily.forEach(function (controlId) {
                        var currentFont = getControlElement(controlId, 'select').val();

                        sortSelectOptions(getControlElement(controlId, 'select').append(fontOption.clone()));

                        getControlElement(controlId, 'select').val(currentFont);
                    });

                    googleFontEl.val('');
                } else {
                    googleFontMessage.text(response.data);
                }
            },
            error: function (jqXhr) {
                addGoogleFontButton.prop('disabled', false);
                googleFontMessage.text(jqXhr.statusText);
            }
        });
    });

    getControlElement('reset_options', 'input').after(' <span id="reset-options-error-message"></span>');

    getControlElement('reset_options', 'input').on('click', function (event) {
        event.preventDefault();

        var resetOptionsConfig = pikartCustomizerData.resetOptionsConfig;

        if (!window.confirm(resetOptionsConfig.confirmMessage)) {
            return;
        }

        var errorMessageElement = $('#reset-options-error-message', window.pikartCoreCustomizer.getParentDocument());
        errorMessageElement.text('');

        $.ajax({
            method: 'POST',
            url: wp.ajax.settings.url,
            data: {
                action: 'pikart_reset_options',
                nonce: resetOptionsConfig.nonce
            },
            success: function (response) {
                if (response.success) {
                    parent.location.reload();
                } else {
                    errorMessageElement.text(response.data);
                }
            },
            error: function (jqXhr) {
                errorMessageElement.text(jqXhr.statusText);
            }
        });
    });

    $('.customize-control-number', window.pikartCoreCustomizer.getParentDocument())
        .find('input[type="number"]').each(function () {
        window.pikartAdminUtil.validateInputNumberRange(this);
    });


    /**
     * @since 1.6.0
     */
    getControlElement('copy_parent_theme_options', 'input')
        .after(' <span id="copy-parent-theme-options-error-message"></span>');

    getControlElement('copy_parent_theme_options', 'input').on('click', function (event) {
        event.preventDefault();

        var optionsConfig = pikartCustomizerData.copyParentThemeOptionsConfig;

        if (!window.confirm(optionsConfig.confirmMessage)) {
            return;
        }

        var errorMessageElement = $('#copy-parent-theme-options-error-message',
            window.pikartCoreCustomizer.getParentDocument());
        errorMessageElement.text('');

        $.ajax({
            method: 'POST',
            url: wp.ajax.settings.url,
            data: {
                action: 'pikart_copy_parent_theme_options',
                nonce: optionsConfig.nonce
            },
            success: function (response) {
                if (response.success) {
                    parent.location.reload();
                } else {
                    errorMessageElement.text(response.data);
                }
            },
            error: function (jqXhr) {
                errorMessageElement.text(jqXhr.statusText);
            }
        });
    });

})(jQuery);
